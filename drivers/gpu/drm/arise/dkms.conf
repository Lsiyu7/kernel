PACKAGE_NAME="arise"
PACKAGE_VERSION=25.00.36
AUTOINSTALL="yes"
#REMAKE_INITRD="yes"
SKIP_IMMD_MODPROBE=1

BUILT_MODULE_NAME[0]="arise"
BUILT_MODULE_LOCATION[0]=""
DEST_MODULE_LOCATION[0]="/updates"

# Find out how many CPU cores can be use if we pass appropriate -j option to make.
# DKMS could use all cores on multicore systems to build the kernel module.
num_cpu_cores()
{
	if [ -x /usr/bin/nproc ]; then
		nproc
	else
		echo "1"
	fi
}

check_gcc_version()
{
local KERNEL_UNAME=`uname -r`
local KERNEL_MODLIB=/lib/modules/${KERNEL_UNAME}
local KERNEL_SOURCES=`test -d ${KERNEL_MODLIB}/source && echo ${KERNEL_MODLIB}/source || echo ${KERNEL_MODLIB}/build`
local KERNEL_COMPILE_H=${KERNEL_SOURCES}/include/generated/compile.h

	if [ -f ${KERNEL_COMPILE_H} ];then

		# Try to get all installed gcc list
		local SYSTEM_GCC_LIST=`ls /usr/bin/gcc-[0-9]* | xargs -n1 | sort -u`

		# Try to get current GCC version, some GCC version string only hava major.minor
		local SYSTEM_GCC_VERSION=`gcc -v 2>&1 | awk 'END{print}' | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n 1`
		if [ -z "$SYSTEM_GCC_VERSION" ];then
			SYSTEM_GCC_VERSION=`gcc -v 2>&1 | awk 'END{print}' | grep -o '[0-9]\+\.[0-9]\+' | head -n 1`
		fi

		# Get version string from 'compile.h', some GCC version string only hava major.minor
		local KERNEL_BUILT_GCC_STRING=`cat ${KERNEL_COMPILE_H} | grep LINUX_COMPILER | cut -f 2 -d '"'`
		local KERNEL_BUILT_GCC_VERSION=`echo "${KERNEL_BUILT_GCC_STRING}" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n 1`
		if [ -z "$KERNEL_BUILT_GCC_VERSION" ];then
			KERNEL_BUILT_GCC_VERSION=`echo "${KERNEL_BUILT_GCC_STRING}" | grep -o '[0-9]\+\.[0-9]\+' | head -n 1`
		fi

		# Checking GCC version and assign gcc by 'CC=' here
		if [ "$KERNEL_BUILT_GCC_VERSION" != "$SYSTEM_GCC_VERSION" ];then
			for TARGET_GCC_PATH in $SYSTEM_GCC_LIST;
			do
				local TARGET_GCC_VERSION=`$TARGET_GCC_PATH -v 2>&1 | awk 'END{print}' | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n 1`
				if [ -z "$TARGET_GCC_VERSION" ];then
					TARGET_GCC_VERSION=`$TARGET_GCC_PATH -v 2>&1 | awk 'END{print}' | grep -o '[0-9]\+\.[0-9]\+' | head -n 1`
				fi

				if [ "$KERNEL_BUILT_GCC_VERSION" = "$TARGET_GCC_VERSION" ];then
					echo "CC=$TARGET_GCC_PATH"
					break;
				fi
			done
		fi

	fi

}

MAKE[0]="make $(check_gcc_version) -j$(num_cpu_cores) -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build"
#POST_REMOVE="post-remove.sh $kernelver"
